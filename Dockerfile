# CARPETA DEPLOYMENT
FROM node:alpine3.16 AS DEPLOYMENT

#TECNICAS PARA OPTIMIZACION DE LIBRERIAS

# HABILITAR DESDE LA TERMINAL DE LA IMAGEN LA FACTIBILIDAD DE DESCARGAR PROCESOS DESDE UNA RUTA REMOTA
RUN apk add curl bash --no-cache

# DESCARGAR EL RECURSO DE UNA RUTA Y VINCULARLO A LA IMAGEN
# EL f SIGNIFICA FORZAR LA INSTALACION, ES MAS QUE TODO CUANDO SE PEGA EL PROCESO
# LA s SIGNIFICA EL SAVE O DESCARGA DE RECURSO
# LA b SIGNIFICA QUE EL RECURSO SE ESTA DESCARGANDO MEDIANTE PROCESAMIENTO BINARIO
RUN curl -sf https://gobinaries.com/tj/node-prune | sh -s -- -b /usr/local/bin

# ESPECIFICACION DEL DIRECTORIO DE LA IMAGEN
WORKDIR /build

# COPIAMOS EL PACKAGE.JSON PARA SABER CUAL SON LAS DEPENDENCIAS QUE HAY QUE INSTALAR
COPY package.json .

# INSTALAR LOS PAQUETES DE NODE
RUN yarn install

# COPIA DE LOS DEMAS ARCHIVOS AL DIRECTORIO DE LA IMAGEN: WORKDIR
COPY . .

# GENERAR EL BUILD
RUN yarn run build

# IDENTIFICAR EL ENTORNO --PRODUCTION PARA QUE EL NODE PRUNE TENGA EL CONTEXTO DE LA LIBRERIAS PRODUCTIVAS A PARTIR DEL BUILD GENERADO
RUN yarn install --production

# INTERCEPTAR EL CONTEXTO DE LAS LIBRERIAS Y LA OPTIMIZAREMOS A PARTIR DEL NODE-PRUNE DESCARGADO QUE YA POSEE LA IMAGEN
RUN /usr/local/bin/node-prune

# DIRECTORY PRODUCTIONS
FROM node:alpine3.16

# DIRECTORIO DE LA IMAGEN
WORKDIR /app

# COPIAR ARCHIVOS DESDE LA PRIMERA IMAGEN A LA FINAL QUE ES ESTA ACTUAL
COPY --from=DEPLOYMENT /build/node_modules ./node_modules

COPY --from=DEPLOYMENT /build/package.json ./package.json

COPY --from=DEPLOYMENT /build/dist ./dist

#COPY --from=DEPLOYMENT /build/.env ./.env

# ESTE COMANDO CMD SE DISPARA YA CUANDO LA IMAGEN EXISTE Y TIENES EL CODIGO DISPONIBLE
CMD ["yarn", "run", "prod"]
